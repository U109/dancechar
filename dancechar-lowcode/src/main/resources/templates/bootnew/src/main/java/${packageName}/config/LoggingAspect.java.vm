package ${packageName}.config;


import com.alibaba.fastjson.JSON;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * 日志统一打印
 *
 * @author ${authorName}
 * @date ${createDateString}
 */
@Aspect
@Configuration
@Slf4j
public class LoggingAspect {

    @Pointcut("within(${packageName}.*.controller.*) || within(${packageName}.*.*Controller)")
    public void loggingPointcut() {
    }

    @AfterThrowing(pointcut = "loggingPointcut()", throwing = "e")
    public void logAfterThrowing(JoinPoint joinPoint, Throwable e) {
        log.error("Exception in {}.{}() with cause = '{}' and exception = '{}'", joinPoint.getSignature().getDeclaringTypeName(),
                joinPoint.getSignature().getName(), e.getCause() != null ? e.getCause() : "NULL", e.getMessage(), e);
    }

    @Around("loggingPointcut()")
    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {
        //计算时长
        long start = System.currentTimeMillis();
        try {
            Object result = joinPoint.proceed();
            //计算时长
            long last = System.currentTimeMillis() - start;
            //打印日志
            printLog(joinPoint, last,result);
            return result;
        } catch (Throwable t) {
            log.error("AOP异常捕获", t);
            Object[] args = joinPoint.getArgs();
            StringBuilder sb = new StringBuilder();
            for (Object obj : args) {
                // fastjson 序列化一些类会报异常
                if (obj instanceof MultipartFile) {
                    continue;
                }
                if (obj instanceof HttpServletResponse) {
                    continue;
                }
                try {
                    sb.append(JSON.toJSONString(obj));
                } catch (Exception e) {
                    sb.append(obj.toString());
                }
            }
            log.error("异常捕获: {} in {}.{}()", sb.toString(),
                    joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());
            throw t;
        }
    }

    private void printLog(ProceedingJoinPoint pjp,long lastTime,Object result) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String url = request.getRequestURL().toString();
        String ip = request.getRemoteAddr();
        String classMethod = pjp.getSignature().getName();
        StringBuilder sb = new StringBuilder();
        sb.append("IP=[").append(ip).append("]");
        sb.append("-访问路径：[").append(url).append("]");
        sb.append("-访问方法名：[").append(classMethod).append("]-入参：");
        Object[] args = pjp.getArgs();
        for (Object obj : args) {
            // fastjson 序列化一些类会报异常
            if (obj instanceof MultipartFile) {
                continue;
            }
            if (obj instanceof HttpServletResponse) {
                continue;
            }
            try {
				sb.append(JSON.toJSONString(obj));
			} catch (Exception e) {
				sb.append(obj.toString());
			}
        }
        sb.append("-返回结果：【").append(JSON.toJSONString(result)).append("】");
        sb.append("-耗时[").append(lastTime).append("ms]");
        log.info(sb.toString());
    }
}
